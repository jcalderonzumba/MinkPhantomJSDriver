{% autoescape false %}
(function (xpath, value, multiple) {

  function clickOnElement(element) {
    // create a mouse click event
    var event = document.createEvent('MouseEvents');
    event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);

    // send click to element
    element.dispatchEvent(event);

    //After dispatching the event let's wait for 2 seconds at least...
    return setTimeout(function () {
    }, 2);
  }

  function deselectAllRadioOptions(element){
    var formElements = element.form.elements;
    for (i = 0; i < formElements.length; i++) {
      radioElement = formElements[i];
      if (radioElement.tagName.toLowerCase() == 'input' && radioElement.type.toLowerCase() == 'radio') {
        radioElement.checked = false;
      }
    }
  }

  function selectRadioValue(element, value) {
    if (element.value === value) {
      deselectAllRadioOptions(element);
      clickOnElement(element);
      element.checked = true;
      dispatchChange(element);
      return true;
    }

    var formElements = element.form.elements;
    var name = element.getAttribute("name");
    var radioElement, i;

    if (!name) {
      return null;
    }

    for (i = 0; i < formElements.length; i++) {
      radioElement = formElements[i];
      if (radioElement.tagName.toLowerCase() == 'input' && radioElement.type.toLowerCase() == 'radio' && radioElement.name == name) {
        if (value === radioElement.value) {
          deselectAllRadioOptions(element);
          clickOnElement(radioElement);
          radioElement.checked = true;
          dispatchChange(radioElement);
          return true;
        }
      }
    }

    return null;
  }

  function xpathStringLiteral(s) {
    if (s.indexOf('"') === -1)
      return '"' + s + '"';
    if (s.indexOf("'") === -1)
      return "'" + s + "'";
    return 'concat("' + s.replace(/"/g, '",\'"\',"') + '")';
  }

  function deselectAllOptions(element) {
    var i, l = element.options.length;
    for (i = 0; i < l; i++) {
      element.options[i].selected = false;
    }
  }

  function dispatchChange(element){
    var tagName =element.tagName.toLowerCase();
    var elementType = element.getAttribute("type");
    if (tagName != "option" || (tagName == "input" && elementType == "radio")){
      return true;
    }
    var event;
    event = document.createEvent('HTMLEvents');
    event.initEvent('change', true, false);
    element.dispatchEvent(event);
    return true;
  }

  function selectOptionOnElement(element, option, multiple) {
    var polterAgent = window.__poltergeist;
    var escapedOption = xpathStringLiteral(option);
    // The value of an option is the normalized version of its text when it has no value attribute
    var optionQuery = ".//option[@value = " + escapedOption + " or (not(@value) and normalize-space(.) = " + escapedOption + ")]";
    var ids = polterAgent.find("xpath", optionQuery, element);
    var polterNode = polterAgent.get(ids[0]);
    var optionElement = polterNode.element;

    if (multiple || !element.multiple) {
      if (!optionElement.selected) {
        clickOnElement(optionElement);
        optionElement.selected = true;
      }
      return dispatchChange(optionElement);
    }

    deselectAllOptions(element);
    clickOnElement(optionElement);
    optionElement.selected = true;
    return dispatchChange(optionElement);
  }

  function doLogic(xpath, value, multiple) {
    var polterAgent = window.__poltergeist;
    var ids = polterAgent.find("xpath", xpath, document);
    var polterNode = polterAgent.get(ids[0]);
    var domElement = polterNode.element;

    if (domElement.tagName.toLowerCase() == "input" && domElement.getAttribute("type").toLowerCase() == "radio") {
      return selectRadioValue(domElement, value);
    }

    if (domElement.tagName.toLowerCase() == "select") {
      var boolMultiple = null;
      if (multiple == "1" || multiple == 1) {
        boolMultiple = true;
      } else if (multiple == "0" || multiple == 0) {
        boolMultiple = false;
      }
      return selectOptionOnElement(domElement, value, boolMultiple);
    }

    return null;
  }

  return doLogic(xpath, value, multiple);
}(atob('{{ xpath }}'), '{{ value }}', '{{multiple}}'));
{% endautoescape %}
